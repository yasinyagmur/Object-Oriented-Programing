import os
os.system('cls' if os.name == 'nt' else 'clear')

print("--------------------------------------")
# def print_types(data):
#     for i in data:
#         print(i, type(i))

# test = [122, "victor", [1,2,3], (1,2,3), {1,2,3}, True, lambda x:x]

# print_types(test)


# class Person:
#     name = "victor"
#     age = 32


# person1 = Person()
# person2 = Person()

# print(person1.name)

# Person.job = "Fullstack developer"

# print(person2.job)
# classta yapÄ±lan deÄŸiÅŸiklikler o classtan Ã¼retilen instancelara da aktarÄ±lÄ±r.

#! class attributes vs instance attributes


# class Person:
#     name = "victor"
#     age = 32

# person1 = Person()
# person2 = Person()

# person1.location = "Turkey"
# print(person2.locaiton)
# bir instance a eklenen attribute diÄŸerlerini deÄŸiÅŸtirmez
# person2.age = 18
# print(person2.age)
# print(person1.age)
# ? Ä°lk Ã¶nce instance'a bakÄ±yor. Orada yoksa class'a gidip bakÄ±yor ğŸ‘†

# class Person:
#     company = "clarusway"

#     def test(self):
#         print("test")

#     def set_details(self, name, age):
#         self.name = name
#         self.age = age

#     def get_details(self):
#         print(self.name, self.age)

#     @staticmethod
#     def salute():
#         print("Hi there!")


# person1 = Person()
# person2 = Person()

# person1.test()
# Person.test(person1)  python arkada bu ÅŸekle dÃ¶nÃ¼ÅŸtÃ¼rÃ¼yor ve o yÃ¼zden Ã¼stteki Ã§alÄ±ÅŸmÄ±yor.(arguman gÃ¶nderdin diyor) def tanÄ±mlamasÄ±na self ekleyerek sorunu Ã§Ã¶zebiliriz.
# person1.set_details("victor", 30)
# person1.get_details()

# person1.salute()

# #! special methods (init, str)

# class Person:
#     company = "clarusway"

#     def __init__(self, name, age):
#         self.name = name
#         self.age = age

#     def get_details(self):
#         print(self.name, self.age)

#     def __str__(self):    #  print(person1) yaparsak ve str yoksa bize adresini ve nereden tÃ¼redildiÄŸini dÃ¶ndÃ¼rÃ¼r ama str varsa buradakileri dÃ¶ndÃ¼rÃ¼r. arka planda print(person1.__str__) Ã§alÄ±ÅŸÄ±yor.
#         return f"{self.name} - {self.age}"

# person1 = Person("victor", 32)   # init methodu sayesinde arguman gÃ¶nderip direk oluÅŸturabiliriz.
# # person1.get_details()

# person2 = Person("selcuk", 22)
# # person2.get_details()
# print(person1)

#! OOP Principies (4 pillars)

# * encapsulation => izinsiz giriÅŸleri ve deÄŸiÅŸtirmeleri engelleme (python da tam olarak uygulamasÄ± yoktur.)
# * abstraction   => kullanÄ±cÄ±n bilmesinin gerek olmayanÄ±nÄ± gizleme
# * polymorhism   => overwriting = parent'tan gelen yapÄ± ihtiyacÄ±mÄ±zÄ± tam karÅŸÄ±lamÄ±yorsa update edebilmemiz.
#* overloading = parent'tan gelen yapÄ±yÄ± farklÄ± parametrelerle deÄŸiÅŸtirebilmemiz. veya methodu birden farklÄ± tanÄ±mlayabilmemizdir. Verilen parametlere gÃ¶re kendisi seÃ§erek kullanÄ±r.
# * inheritance   => kalÄ±tÄ±m. Parent'tan chield'a aktarÄ±lmasÄ±


# ? encapsulation and abstraction
# class Person:
#     company = "clarusway"

#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#         self._id = 5000   # bunu deÄŸiÅŸtirirsen sÄ±kÄ±ntÄ± Ã§Ä±kar dyoruz ama deÄŸiÅŸtirilebilir.
#         self.__id = 3000
#     def __str__(self):
#         return f"{self.name} - {self.age}"

#     def get_details(self):
#         print(self.name, self.age)

# person1 = Person("henry", 18)
# person1._id = 4000   # ulaÅŸÄ±p deÄŸiÅŸtirebildik
# print(person1._id)
# # print(person1.__id)   # Ã§ift Ã§izgi olunca ulaÅŸamÄ±yoruz bu ÅŸekilde.
# print(person1._Person__id)  # bu ÅŸekilde ulaÅŸabiliyoruz.
# person1._Person__id = 4000
# print(person1._Person__id)  # bu ÅŸekilde de deÄŸiÅŸtirebiliriz.


# ? inheritance and polymorphism

class Person:
    company = "clarusway"

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"{self.name} - {self.age}"

    def get_details(self):
        print(self.name, self.age)


class Lang:
    def __init__(self, langs):
        self.langs = langs

    def display_langs(self):
        print(self.langs)

# birden fazla class'tan inheritance Ã¼retebiliriz.


class Employee(Person, Lang):
    def __init__(self, name, age, path, langs):
        # self.name = name   # bÃ¶yle elle de yazabiliriz veya super ile alabiliriz.
        # self.age = age
        # super ilk sÄ±raya yazÄ±lÄ± olan Person'u tanÄ±mlÄ±yor.
        super().__init__(name, age)
        # self.langs = langs
        self.path = path
        # super kullanamadÄ±ÄŸÄ±mÄ±z iÃ§in bu ÅŸekilde yazmamÄ±z gerekiyor.
        Lang.__init__(self, langs)

    def get_details(self):    # overwrite yapmÄ±ÅŸ olduk...
        print(self.name, self.age, self.path, self.langs)
        # super().get_details()  # parent'taki Ã¶zellikleri de kullanmaya bu ÅŸekilde devam edebiliriz.
        # print(self.path)


emp1 = Employee("vic", 32, "FS", ["python", "JS"])
# print(emp1)
# Person class'Ä±n daki method'larÄ±n ve atribute'larÄ±n hepsini Employee classÄ±nda inherit alarak kullanmÄ±ÅŸ olduk.
emp1.get_details()
emp1.display_langs()   # Lang classÄ±ndan miras aldÄ±...


# ? inner class


# class Article(models.Model):
#     name = models.CharField(max_length=50)
#     author = models.CharField(max_length=50)

#     class Meta:
#         ordering = ["name"]


print("--------------------------------------")
